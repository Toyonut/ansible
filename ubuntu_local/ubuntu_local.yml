---

- name: Elevated playbook tasks on localhost
  hosts: 127.0.0.1
  connection: local
  become: yes
  vars:
    user: paul 
    release: bionic
  tasks:

  - name: print out the hostname of target
    command: echo $HOSTNAME

  - name: get docker gpg key
    get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /tmp/docker_gpg
  
  - name: install docker gpg key
    command: apt-key add /tmp/docker_gpg
  
  - name: add docker repo
    command: add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ vars.release }} stable"
  
  - name: update the apt package index i.e. apt-get update
    apt: update_cache=yes

  - name: upgrade system packages i.e. apt-get upgrade
    apt: upgrade=yes
  
  - name: install required packages
    command: apt install git geary build-essential dropbox meld cheese curl python3-distutils apt-transport-https ca-certificates docker-ce -y
  
  - name: remove thunderbird
    command: apt autoremove thunderbird -y
  
  - name: adding existing user '{{ vars.user }}' to group docker
    user:
      name: '{{ vars.user }}'
      groups: docker
      append: yes

  
- name: Non-Elevated playbook tasks on localhost
  hosts: 127.0.0.1
  connection: local
  vars: 
    nvm_ver: v0.33.11
    node_ver: 8.11.3
    shell_rc_path: ~/.bashrc
  tasks:
  
  - name: print out the hostname of target
    command: echo $HOSTNAME
  
  - name: get pip
    get_url:
      url: https://bootstrap.pypa.io/get-pip.py
      dest: /tmp/get-pip.py
  
  - name: install PIP
    command: python /tmp/get-pip.py --user
  
  - name: install PIP3
    command: python3 /tmp/get-pip.py --user
  
  - name: add PIP to path
    blockinfile:
      state: present
      path: "{{ vars.shell_rc_path }}"
      block: |
        export PATH=$PATH:$HOME/.local/bin
      insertafter: EOF
      marker_begin: PIP_BEGIN
      marker_end: PIP_END
      backup: yes

  - name: get NVM
    get_url:
      url: "https://raw.githubusercontent.com/creationix/nvm/{{ vars.nvm_ver }}/install.sh"
      dest: /tmp/nvm_install.sh
  
  - name: install NVM
    command: bash /tmp/nvm_install.sh
  
  - name: test for NVM loaded in file
    shell: "grep NVM {{ vars.shell_rc_path }}"
    register: test_nvm_in_dotfile 
  
  - name: load NVM into shell if not exists
    blockinfile:
      path: "{{ vars.shell_rc_path }}"
      backup: yes
      insertafter: EOF
      marker_begin: NVM_BEGIN
      marker_end: NVM_END
      block: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
      state: present
    when: test_nvm_in_dotfile.stdout == "0"
        
  - name: Reload bashrc
    shell: . ~/.bashrc
    