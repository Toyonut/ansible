---
- name: kill elementary appcenter
  connection: local
  become: yes
  hosts: 127.0.0.1
  tasks:
    - name: kill elementary appcenter
      command: pkill -f io.elementary.appcenter
      ignore_errors: yes

- name: Elevated playbook tasks on localhost
  hosts: 127.0.0.1
  connection: local
  become: yes
  roles:
    - role: powershell_core
    - role: dotnet_core_sdk
    - role: docker
      user: paul 
    - role: golang
      shell_rc_path: ~/.zshrc
  tasks:
  - name: print out the hostname of target
    command: echo $HOSTNAME

  - name: update and upgrade system packages
    apt: 
      update_cache: yes
      upgrade: full
  
  - name: install required packages
    apt: 
      name: "{{ packages }}"
      state: latest
    vars:
      packages: 
        - git 
        - geary 
        - build-essential  
        - meld 
        - cheese 
        - curl 
        - python3-distutils 
        - apt-transport-https 
        - ca-certificates
        - postgresql
        - tlp
        - zsh
        - vim
        - fonts-powerline
        - fonts-firacode 
  
  - name: remove thunderbird
    apt:
      name: thunderbird
      state: absent

  - name: Remove dependencies that are no longer required
    apt:
      autoremove: yes
  
- name: Non-Elevated playbook tasks on localhost
  hosts: 127.0.0.1
  connection: local
  vars: 
    nvm_ver: 'v0.33.11'
    node_ver: '8.11.3'
    shell_rc_path: ~/.zshrc
  tasks:
  
  - name: print out the hostname of target
    command: echo $HOSTNAME
  
  - name: get pip
    get_url:
      url: https://bootstrap.pypa.io/get-pip.py
      dest: /tmp/get-pip.py
  
  - name: check if pip exists   
    stat: 
      path: ~/.local/bin/pip
    register: pip_exists
  
  - name: check if pip3 exists   
    stat: 
      path: ~/.local/bin/pip3
    register: pip3_exists
  
  - name: install PIP
    command: python /tmp/get-pip.py --user
    when: not pip_exists.stat.exists
  
  - name: install PIP3
    command: python3 /tmp/get-pip.py --user
    when: not pip3_exists.stat.exists
  
  - name: add PIP to path
    blockinfile:
      state: present
      path: "{{ vars.shell_rc_path }}"
      block: |
        export PATH=$PATH:$HOME/.local/bin
      insertafter: EOF
      marker_begin: PIP_BEGIN
      marker_end: PIP_END
      backup: yes

  - name: get NVM
    get_url:
      url: "https://raw.githubusercontent.com/creationix/nvm/{{ vars.nvm_ver }}/install.sh"
      dest: /tmp/nvm_install.sh
  
  - name: install NVM
    command: bash /tmp/nvm_install.sh
  
  - name: check if oh-my-zsh exists   
    stat: 
      path: ~/.oh-my-zsh
    register: zsh_installed

  - name: check if my zsh theme exists   
    stat: 
      path: ~/.oh-my-zsh/themes/paul.zsh-theme
    register: zsh_theme_installed
  
  - name: get oh-my-zsh
    get_url: 
      url: " https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh"
      dest: /tmp/oh_my_zsh_install.sh
    when: not zsh_installed
  
  - name: install oh-my-zsh
    command: bash /tmp/oh_my_zsh_install.sh
    when: not zsh_installed
  
  - name: get my zsh theme
    get_url:
      url: "https://raw.githubusercontent.com/Toyonut/zsh-theme/master/paul.zsh-theme"
      dest: ~/.oh-my-zsh/themes/paul.zsh-theme
    when: not zsh_theme_installed
  
  - name: test for NVM loaded in file
    shell: "grep NVM {{ vars.shell_rc_path }}"
    register: test_nvm_in_dotfile 
    ignore_errors: true
  
  - name: load NVM into shell if not exists
    blockinfile:
      path: "{{ vars.shell_rc_path }}"
      backup: yes
      insertafter: EOF
      marker_begin: NVM_BEGIN
      marker_end: NVM_END
      block: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
      state: present
    when: test_nvm_in_dotfile.stdout == ""
